"""
This security layer  handles A/B storage for files in RepyV2.
To run:
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    """ 

TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a' #readat file: the backup
    self.Bfn = filename+'.b' #writeat file: buffers all changes until close() is called

    # File doesn't exist, create is true
    if create:
      # Create the original file (to lock the filename from use by another program)
      self.file = openfile(filename, True)

      try:
        # make the files and add 'SE' to the readat file...
        self.Afile = openfile(self.Afn, True)
        self.Bfile = openfile(self.Bfn, True)
        self.Afile.writeat('SE',0)

      except (FileInUseError, ResourceExhaustedError) as e: #FileExistsError
        # log(f"A and B Files named {filename} already exist")
        log("NotImplemented\n")
        raise e

      except RepyArgumentError as e:
        # log(f"{filename} is an invalid name or create is not a boolean type")
        raise e


    # File already exists, create is false
    else: 
      try:
        # Open the original file (to lock the filename from use by another program)
        self.file = openfile(filename, False)

        # create A and B files as copies of existing file's contents
        file_contents = self.file.readat(None, 0)

        self.Afile = openfile(self.Afn, False)
        self.Afile.writeat(file_contents, 0)
        self.Bfile = openfile(self.Bfn, False)
        self.Bfile.writeat(file_contents, 0)

        if not (self.check_valid_Afile and self.check_valid_Bfile):
          raise RepyArgumentError() #the original file contents are invalid

      except (FileNotFoundError) as e:
        #log(f"File {filename} does not exist yet, but was accessed without create flag")
        raise e

      except FileInUseError as e: #.a and .b reference monitor files should not exist
        #log(f".a and .b files already exist for {filename}") #NO OUTPUT
        raise e


  def writeat(self,data,offset):
    # Write the requested data to the B file using the sandbox's writeat call
    if offset < len(self.Bfile.readat(None,0)):
      self.Bfile.writeat(data,offset)
  
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    return self.Afile.readat(bytes,offset)

  def close(self):
    #check if file contents are "safe" (begin with 'S' and end with 'E')
    first_char = self.readat(1, 0);
    file_length = len(self.readat(None,0));
    last_char = self.readat(None, file_length-1);

    # Passed safety check: Restore edited B file
    if self.check_valid_Bfile:
      file_contents = self.Bfile.readat(None,0)
      self.file.writeat(file_contents,0)

    # Failed safety check : Restore backup 'A' file
    else: 
      file_contents = self.Afile.readat(None,0)
      self.file.writeat(file_contents,0)

    # Save changes
    self.file.close()

    # Close and delete AB files
    self.Afile.close()
    self.Bfile.close()
    removefile(self.Afn)
    removefile(self.Bfn)

  # Helper functions

  def check_valid_Bfile(self):
    # Check if file contents are "safe" (begin with 'S' and end with 'E')
    first_char = self.Bfile.readat(1, 0);
    file_length = len(self.Bfile.readat(None,0));
    last_char = self.Bfile.readat(None, file_length-1);

    if not (first_char == "S" and last_char == "E"): 
      return False
    # Add other conditions here
    return True

  def check_valid_Afile(self):
    # Check if file contents are "safe" (begin with 'S' and end with 'E')
    first_char = self.Afile.readat(1, 0);
    file_length = len(self.Afile.readat(None,0));
    last_char = self.Afile.readat(None, file_length-1);

    if not (first_char == "S" and last_char == "E"): 
      return False
    # Add other conditions here
    return True

    


def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()