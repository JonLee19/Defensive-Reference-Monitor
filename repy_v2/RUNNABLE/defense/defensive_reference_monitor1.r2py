"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"



class ABFile():
  lock = createlock()
  
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'
    self.filename = filename
    #self.lock = createlock()
    #if self.lock.acquire(True):

    # make the files and add 'SE' to the readat file...
    if create:
      self.file = openfile(filename, True)
      self.Afile = openfile(self.Afn,create)
      self.Bfile = openfile(self.Bfn,create)
      self.Afile.writeat('SE',0)
      self.Bfile.writeat('SE',0)
      
    #file already exists
    else:
    
      self.file = openfile(filename, False)
      #create temporary A and B files
      self.Afile = openfile(self.Afn, True) 
      self.Bfile = openfile(self.Bfn, True)
      
      #copy content of file to file A and file B
      file_copy = self.file.readat(None,0)
      self.Afile.writeat(file_copy,0)
      self.Bfile.writeat(file_copy,0)
      

  def writeat(self,data,offset):
    
    # Write the requested data to the B file using the sandbox's writeat call
    if offset <= len(self.Bfile.readat(None,0)):
      #def wrap_writeat():
      #  self.Bfile.writeat(data,offset)
      #lock = createlock()
      #lock.acquire(True)
      self.Bfile.writeat(data,offset)
      #createthread(wrap_writeat)
      #lock.release()
      
    
  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    return self.Afile.readat(bytes,offset)

  def close(self):
    B_file_size = len(self.Bfile.readat(None, 0))
    #check if first byte is S and last byte is E
    if self.Bfile.readat(1, 0) == 'S' and self.Bfile.readat(1, B_file_size-1) == 'E': #file is valid
      #copy content of file B to file
      Bfile_copy = self.Bfile.readat(None,0)
      self.file.writeat(Bfile_copy,0)
      self.file.close() 
    else:
      #copy content of file A to file
      Afile_copy = self.Afile.readat(None,0)
      self.file.writeat(Afile_copy,0)
      self.file.close() 
    
    #cleanup
    self.Afile.close()
    self.Bfile.close()
    ABFile.lock.release()
      
    #remove the temporary A and B files
    if self.Afn in listfiles():
      removefile(self.Afn)
    if self.Bfn in listfiles():
      removefile(self.Bfn)

    
def ABopenfile(filename, create):
  #lock = createlock()
  if ABFile.lock.acquire(False):
    return ABFile(filename,create)
  else:
    print("no lock!")
    #lock.release()




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
