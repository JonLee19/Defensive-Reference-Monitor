def cleanup():
  # Clean up of existing file
  if "testfile.txt" in listfiles():
    removefile("testfile.txt")
  if "testfile1.txt" in listfiles():
    removefile("testfile1.txt")
  if "testfile.txt.a" in listfiles():
    removefile("testfile.txt.a")
  if "testfile.txt.b" in listfiles():
    removefile("testfile.txt.b")
  # Clean up of existing file
  if "testfile1.txt.a" in listfiles():
    removefile("testfile1.txt.a")
  if "testfile1.txt.b" in listfiles():
    removefile("testfile1.txt.b")

cleanup()

log("Beginning Attack Case 1 - Testing Invalid Arguments\n")
  
try:
  testfile1= ABopenfile("testfile1.txt",False)
except FileNotFoundError:
  log("PASSED | Non-existent file opened with create=False\n")

else:
  log("FAILED | Non-existent file opened with create=False\n")
  try:
    testfile1.close()
  except:
    log("Testfile1 "+str(testfile1)+" failed to close because it has value 0\n")

try:
  testfile=ABopenfile("testfile.txt",True) #Valid filename

  '''
  Filenames may only be in the current directory and may only contain 
  lowercase letters, numbers, the hyphen, underscore, and period characters. 
  Also, filenames cannot be '.', '..', the blank string or start with a period. 
  There is no concept of a directory or a folder in repy. 
  Filenames must be no more than 120 characters long.
  '''

  testfile=ABopenfile(".",True) # Cannot be named .
  testfile=ABopenfile("..",True) # Cannot be named ..
  testfile=ABopenfile("",True) # Cannot be named blank string
  testfile=ABopenfile(".testfile.txt",True) # Cannot start with .

  testfile=ABopenfile("Ttestfile.txt",True) #No uppercase 
  testfile=ABopenfile("sdfji_sdf.txt",True) #No underscores
  testfile=ABopenfile("set*sdfdfs.txt",True) #No special chars
  testfile=ABopenfile("set*/dfs.txt",True) #No special chars
  testfile=ABopenfile("set\dfs.txt",True) #No special chars
  testfile=ABopenfile("set\'dfs.txt",True) #No special chars

  


except RepyArgumentError:
  log("PASSED | Disallowed Filenames \n")

else:
  log("FAILED | Disallowed Filenames\n")
  try:
    testfile.close()
  except:
    log("Testfile "+str(testfile)+" threw an exception when trying to close it because of the attempts to open invalid files\n")

log("End of Attack Case 1\n")