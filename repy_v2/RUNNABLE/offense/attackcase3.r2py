def logln(sentence):
  log(str(sentence)+"\n")

def cleanupAB(filename):
  if filename in listfiles():
    removefile(filename)
  Afn = filename+".a"
  Bfn = filename+".b"
  # Clean up of A and B files for existing files
  if Afn in listfiles():
    removefile(Afn)
  if Bfn in listfiles():
    removefile(Bfn)

cleanupAB("testfile.txt")
cleanupAB("testfile1.txt")
    
logln("Beginning Attack Case 3 - Preventing Invalid Writes")

testfile1=ABopenfile("testfile1.txt",True)

# put some invalid bad data in the file.
testfile1.writeat("S1234567890E",20)
testfile1.writeat("S12345E",0)
testfile1.writeat("S",11)


try:
  testfile1.writeat(0x0001,"six") #invalid write, six is not numerical
except Exception as e:
  logln("PASSED | Invalid write of non-numerical offset argument")
else:
  logln("FAILED | Invalid write of non-numerical offset argument")


testfile1.close()

#reopen the file
testfile1=ABopenfile("testfile1.txt",False)

try:
  # I should get 'SE' because the earlier edits were invalid
 #assert('SE' == testfile1.readat(None,0))
  pass
except FileClosedError:
  logln("FAILED | Cannot open file, closed already")

#Invalid write
try: 
  testfile1.writeat(0x0001,0)
except RepyArgumentError as e:
  logln("PASSED | Invalid write of non-string data not allowed")
else:
  logln("FAILED | Invalid write of non-string data not allowed")

testfile1.close()

#Cannot Write after file close
try: 
  testfile1.writeat("SWriteAfterFileCloseE",0)
except Exception as e:
  logln("PASSED | Cannot write after file close")
else:
  logln("FAILED | Cannot write after file close")

# try:
#   testfile1.close() #try closing again
# except (FileClosedError, Exception) as e:
#   logln("PASSED | Closing File which has been closed already")
# else:
#   logln("FAILED | Closing File which has been closed already")



logln("End of Attack Case 3")
